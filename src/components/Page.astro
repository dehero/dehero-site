---
import MarkdownImage from './MarkdownImage.astro';
import MarkdownH1 from './MarkdownH1.astro';
import MarkdownBlockquote from './MarkdownBlockquote.astro';
import MarkdownContent from './MarkdownContent.astro';
import { getDoc, getDocInfo, getDocMetaDescription, type Doc } from '../entities/docs';
import { getDocs, getDocMetaTitle } from '../entities/docs';
import { createTranslatedUrl, LANGUAGES, LANGUAGE_DESCRIPTORS, getCurrentLanguage } from '../entities/languages';
import Links from './Links.astro';
import { render } from 'astro:content';
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import Projects from './Projects.astro';

interface Props {
  doc: Doc;
}

const { doc } = Astro.props;

const currentLanguage = getCurrentLanguage(Astro.url);
const { Content } = await render(doc);
const info = await getDocInfo(doc, currentLanguage);
const indexDoc = await getDoc('index');
const indexDocInfo = indexDoc ? await getDocInfo(indexDoc, currentLanguage) : undefined;
const projectInfos =
  doc.id === 'index'
    ? (
        await Promise.all(
          (await getDocs(({ id }) => id !== 'index')).map((entry) => getDocInfo(entry, currentLanguage)),
        )
      ).sort(
        (a, b) =>
          (a.updateFrequency ?? Infinity) - (b.updateFrequency ?? Infinity) ||
          (a.started?.getTime() ?? 0) - (b.started?.getTime() ?? 0) ||
          a.id.localeCompare(b.id, 'en'),
      )
    : [];

const year = new Date().getFullYear();
const startYear =
  projectInfos.length > 0
    ? Math.min(...projectInfos.map((a) => a.started?.getFullYear() ?? year))
    : info.started?.getFullYear();

const { strings } = LANGUAGE_DESCRIPTORS[currentLanguage];

const components = {
  h1: MarkdownH1,
  img: MarkdownImage,
  blockquote: MarkdownBlockquote,
  Content: MarkdownContent,
};
---

<html lang={currentLanguage}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <title>{getDocMetaTitle(doc, currentLanguage) || info.title}</title>
    <meta name="description" content={getDocMetaDescription(doc, currentLanguage)} />
  </head>

  <body>
    <div class="wrapper">
      <header class="header">
        <nav class="nav">
          <ul class="language-switcher">
            {
              LANGUAGES.map((language) => (
                <li>
                  {language !== currentLanguage ? (
                    <a href={createTranslatedUrl(Astro.url.pathname, language)}>
                      {LANGUAGE_DESCRIPTORS[language].label}
                    </a>
                  ) : (
                    LANGUAGE_DESCRIPTORS[language].label
                  )}
                </li>
              ))
            }
          </ul>
          {
            doc.id !== 'index' && (
              <a href={createTranslatedUrl('/', currentLanguage)} class="back">
                <Icon name="back" />
              </a>
            )
          }
          <div class="heading">
            {doc.data.icon && <Image src={doc.data.icon} alt={info.title} class="icon" />}
            <h1 class="title">
              {info.title}
            </h1>
          </div>
        </nav>
      </header>
      <main class="main">
        {
          doc.data.started && doc.data.finished ? (
            <p class="timeline">
              {doc.data.started.toLocaleDateString(currentLanguage, { dateStyle: 'long' })}
              {' — '}
              {doc.data.finished.toLocaleDateString(currentLanguage, { dateStyle: 'long' })}
            </p>
          ) : doc.data.started ? (
            <p class="timeline">
              {strings.from} {doc.data.started.toLocaleDateString(currentLanguage, { dateStyle: 'long' })}
            </p>
          ) : undefined
        }
        <Content components={components} />
        {
          projectInfos.length > 0 ? (
            <>
              <h2>{strings.projects}</h2>
              <Projects projectInfos={projectInfos} />
            </>
          ) : null
        }
        {
          doc.data.links && doc.data.links.length > 0 && (
            <>
              <h2>{strings.links}</h2>
              <Links links={doc.data.links} />
            </>
          )
        }
      </main>
      {
        indexDocInfo && (
          <footer class="footer">
            <p>
              &copy; <a href={createTranslatedUrl('/', currentLanguage)}>{indexDocInfo.title}</a>,{' '}
              {startYear && startYear !== year ? `${startYear}—${year}` : year}
            </p>
          </footer>
        )
      }
    </div>
    <!-- Yandex.Metrika counter -->
    <script is:inline type="text/javascript">
      (function (d, w, c) {
        (w[c] = w[c] || []).push(function () {
          try {
            w.yaCounter11888887 = new Ya.Metrika({
              id: 11888887,
              clickmap: true,
              trackLinks: true,
              accurateTrackBounce: true,
              webvisor: true,
            });
          } catch (e) {}
        });
        var n = d.getElementsByTagName('script')[0],
          s = d.createElement('script'),
          f = function () {
            n.parentNode.insertBefore(s, n);
          };
        s.type = 'text/javascript';
        s.async = true;
        s.src = 'https://mc.yandex.ru/metrika/watch.js';
        if (w.opera == '[object Opera]') {
          d.addEventListener('DOMContentLoaded', f, false);
        } else {
          f();
        }
      })(document, window, 'yandex_metrika_callbacks');
    </script>
    <noscript
      ><div>
        <img src="https://mc.yandex.ru/watch/11888887" style="position: absolute; left: -9999px" alt="" />
      </div></noscript
    >
    <!-- /Yandex.Metrika counter -->
  </body>
</html>

<style is:global>
  :root {
    --color-text: #000000;
    --color-accent: #ad712c;
    --color-accent-hover: var(--color-link);
    --color-link: #2c5481;
    --color-link-hover: var(--color-accent);
    font-family: system-ui;
    font-size: 16px;
  }

  body {
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    color: var(--color-text);
    background: #ffffff;
    margin: 1rem;
  }

  a {
    color: var(--color-link);
    /* text-decoration: none;
    border-bottom-width: 1px;
    border-bottom-style: solid;
    border-bottom-color: var(--color-link-underline); */
  }

  a:hover,
  a:active {
    color: var(--color-link-hover);
  }
</style>

<style>
  .nav {
    display: block;
  }

  .back {
    font-size: 2rem;
    text-decoration: none;
    vertical-align: middle;
    display: inline-flex;
    align-items: center;
    height: 3rem;
    margin-right: 1rem;
    margin-bottom: 1rem;
  }

  .heading {
    display: inline-flex;
    align-items: flex-start;
    gap: 0.75rem;
    vertical-align: middle;
    margin-bottom: 1rem;
  }

  .title {
    font-size: 2rem;
    color: var(--color-text);
    margin: 0;
    vertical-align: middle;
    display: inline-block;
    line-height: 3rem;
    flex: 1 1;
    overflow-wrap: anywhere;
    word-wrap: balance;
  }

  .title:hover {
    color: var(--color-text);
  }

  .icon {
    width: 3rem;
    height: 3rem;
    aspect-ratio: 1 / 1;
    max-width: 100%;
    flex: 0 0;
  }

  .language-switcher {
    float: right;
    display: inline-flex;
    align-items: center;
    flex-flow: row nowrap;
    list-style: none;
    gap: 4px;
    margin: 0;
    padding: 0;
    line-height: 3rem;
    margin-bottom: 1rem;
  }

  .wrapper {
    margin: 0 auto;
    width: 40rem;
    max-width: 100%;
    overflow: hidden;
  }

  .main :global(*):first-child {
    margin-top: 0;
  }

  .timeline {
    color: var(--color-accent);
  }

  .footer {
    margin-top: 2rem;
  }

  @media (max-width: 512px) {
    .heading {
      flex-flow: column nowrap;
      align-items: center;
      width: 100%;
    }

    .back {
      margin-bottom: 0;
    }

    .icon {
      width: 10rem;
    }

    .title {
      text-align: center;
    }

    .language-switcher {
      margin-bottom: 0;
    }
  }
</style>
